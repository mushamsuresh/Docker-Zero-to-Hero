#A container is a lightweight, standalone, and executable package that includes everything needed to run a piece of software — including the code, runtime, system tools, libraries, and settings.
Think of it like a box that wraps your application and its environment so it can run anywhere, regardless of the underlying infrastructure.

💡 Imagine you’re shipping a dish. A container is like a sealed lunchbox — it contains the meal (your app) and the needed cutlery (dependencies). Whether you're at home, in the office, or on a plane — you just open and eat. It works the same everywhere.

🐳 Docker Container Example
Suppose you have a Python app that needs Python 3.11 and a few libraries like Flask.

Without containers, you’d:
Install Python manually.
Install Flask and dependencies.
Hope it works the same on all machines.

With Docker, you can create a Dockerfile like this:
# Use official Python image
FROM python:3.11

# Set working directory inside the container
WORKDIR /app

# Copy app files
COPY . .

# Install required libraries
RUN pip install -r requirements.txt

# Run the app
CMD ["python", "app.py"]
🔒 Everything runs inside the container, not affecting your host system.
